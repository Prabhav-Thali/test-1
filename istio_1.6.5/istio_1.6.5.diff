diff --git a/Makefile b/Makefile
index c8754ad6..60df128b 100644
--- a/Makefile
+++ b/Makefile
@@ -45,6 +45,8 @@ else ifeq ($(LOCAL_ARCH),aarch64)
     TARGET_ARCH ?= arm64
 else ifeq ($(shell echo $(LOCAL_ARCH) | head -c 4),armv)
     TARGET_ARCH ?= arm
+else ifeq ($(shell echo $(LOCAL_ARCH) | head -c 5),s390x)
+    TARGET_ARCH ?= s390x
 else
     $(error This system's architecture $(LOCAL_ARCH) isn't supported)
 endif
@@ -65,7 +67,7 @@ export TARGET_OUT_LINUX ?= $(shell pwd)/out/linux_amd64
 
 ifeq ($(BUILD_WITH_CONTAINER),1)
 export TARGET_OUT = /work/out/$(TARGET_OS)_$(TARGET_ARCH)
-export TARGET_OUT_LINUX = /work/out/linux_amd64
+export TARGET_OUT_LINUX = /work/out/linux_s390x
 CONTAINER_CLI ?= docker
 DOCKER_SOCKET_MOUNT ?= -v /var/run/docker.sock:/var/run/docker.sock
 IMG ?= gcr.io/istio-testing/$(IMAGE_NAME):$(IMAGE_VERSION)
diff --git a/Makefile.core.mk b/Makefile.core.mk
index c8c79f35..7b355d96 100644
--- a/Makefile.core.mk
+++ b/Makefile.core.mk
@@ -42,7 +42,7 @@ ifeq "$(origin WITH_LIBCXX)" "undefined"
 WITH_LIBCXX := $(shell ($(CXX) --version | grep ^g++ >/dev/null && echo 0) || echo 1)
 endif
 ifeq "$(WITH_LIBCXX)" "1"
-BAZEL_CONFIG = --config=libc++
+BAZEL_CONFIG = 
 else
 BAZEL_CONFIG =
 endif
diff --git a/WORKSPACE b/WORKSPACE
index fc9f5cd4..1fd9db20 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -34,6 +34,15 @@ bind(
     actual = "//external:ssl",
 )
 
+local_repository(
+     name = "boringssl",
+     path = "/root/boringssl",
+)
+bind(
+     name = "ssl",
+     actual = "@boringssl//:ssl",
+)
+
 # 1. Determine SHA256 `wget https://github.com/istio/envoy/archive/$COMMIT.tar.gz && sha256sum $COMMIT.tar.gz`
 # 2. Update .bazelversion, envoy.bazelrc and .bazelrc if needed.
 #
@@ -50,11 +59,9 @@ ENVOY_REPO = "envoy"
 
 # To override with local envoy, just pass `--override_repository=envoy=/PATH/TO/ENVOY` to Bazel or
 # persist the option in `user.bazelrc`.
-http_archive(
+local_repository(
     name = ENVOY_REPO,
-    sha256 = ENVOY_SHA256,
-    strip_prefix = ENVOY_REPO + "-" + ENVOY_SHA,
-    url = "https://github.com/" + ENVOY_ORG + "/" + ENVOY_REPO + "/archive/" + ENVOY_SHA + ".tar.gz",
+    path = "/root/envoy",
 )
 
 load("@envoy//bazel:api_binding.bzl", "envoy_api_binding")
diff --git a/envoy.bazelrc b/envoy.bazelrc
index f1c01584..5df5727f 100644
--- a/envoy.bazelrc
+++ b/envoy.bazelrc
@@ -16,9 +16,9 @@ build --experimental_strict_action_env=true
 build --host_force_python=PY2
 build --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
 build --action_env=BAZEL_LINKOPTS=-lm
-build --host_javabase=@bazel_tools//tools/jdk:remote_jdk11
-build --javabase=@bazel_tools//tools/jdk:remote_jdk11
-build --enable_platform_specific_config
+build --host_javabase=@local_jdk//:jdk
+build --javabase=@local_jdk//:jdk
+#build --enable_platform_specific_config
 
 # Enable position independent code, this option is not supported on Windows and default on on macOS.
 build:linux --copt=-fPIC
@@ -40,7 +40,7 @@ build:sanitizer --test_tag_filters=-no_san
 
 # Common flags for Clang
 build:clang --action_env=BAZEL_COMPILER=clang
-build:clang --linkopt=-fuse-ld=lld
+#/build:clang --linkopt=-fuse-ld=lld
 
 # Basic ASAN/UBSAN that works for gcc
 build:asan --action_env=ENVOY_ASAN=1
@@ -62,7 +62,7 @@ build:asan --test_env=ASAN_SYMBOLIZER_PATH
 
 # Clang ASAN/UBSAN
 build:clang-asan --config=asan
-build:clang-asan --linkopt -fuse-ld=lld
+#build:clang-asan --linkopt -fuse-ld=lld
 
 # macOS ASAN/UBSAN
 build:macos-asan --config=asan
@@ -80,7 +80,7 @@ build:clang-tsan --config=sanitizer
 build:clang-tsan --define ENVOY_CONFIG_TSAN=1
 build:clang-tsan --copt -fsanitize=thread
 build:clang-tsan --linkopt -fsanitize=thread
-build:clang-tsan --linkopt -fuse-ld=lld
+#build:clang-tsan --linkopt -fuse-ld=lld
 # Needed due to https://github.com/libevent/libevent/issues/777
 build:clang-tsan --copt -DEVENT__DISABLE_DEBUG_MODE
 
diff --git a/extensions/access_log_policy/BUILD b/extensions/access_log_policy/BUILD
index 75586895..e975820a 100644
--- a/extensions/access_log_policy/BUILD
+++ b/extensions/access_log_policy/BUILD
@@ -8,22 +8,22 @@ load(
 
 envoy_package()
 
-envoy_cc_library(
-    name = "access_log_policy_lib",
-    srcs = [
-        "config.cc",
-        "plugin.cc",
-    ],
-    hdrs = [
-        "plugin.h",
-    ],
-    repository = "@envoy",
-    visibility = ["//visibility:public"],
-    deps = [
-        "//extensions/access_log_policy/config/v1alpha1:access_log_policy_config_cc_proto",
-        "//extensions/common:context",
-        "//extensions/common:istio_dimensions",
-        "@envoy//source/common/common:base64_lib",
-        "@envoy//source/extensions/common/wasm/null:null_plugin_lib",
-    ],
-)
+#envoy_cc_library(
+#    name = "access_log_policy_lib",
+#    srcs = [
+#        "config.cc",
+#        "plugin.cc",
+#    ],
+#    hdrs = [
+#        "plugin.h",
+#    ],
+#    repository = "@envoy",
+#    visibility = ["//visibility:public"],
+#    deps = [
+#        "//extensions/access_log_policy/config/v1alpha1:access_log_policy_config_cc_proto",
+#        "//extensions/common:context",
+#        "//extensions/common:istio_dimensions",
+#        "@envoy//source/common/common:base64_lib",
+#        "@envoy//source/extensions/common/wasm/null:null_plugin_lib",
+#    ],
+#)
diff --git a/extensions/attributegen/BUILD b/extensions/attributegen/BUILD
index 4b7844bc..045d0821 100644
--- a/extensions/attributegen/BUILD
+++ b/extensions/attributegen/BUILD
@@ -30,22 +30,22 @@ load(
 
 envoy_package()
 
-envoy_cc_library(
-    name = "attributegen_plugin",
-    srcs = [
-        "plugin.cc",
-    ],
-    hdrs = [
-        "plugin.h",
-    ],
-    repository = "@envoy",
-    visibility = ["//visibility:public"],
-    deps = [
-        ":config_cc_proto",
-        "@envoy//api/wasm/cpp/contrib:contrib_lib",
-        "@envoy//source/extensions/common/wasm/null:null_plugin_lib",
-    ],
-)
+#envoy_cc_library(
+#    name = "attributegen_plugin",
+#    srcs = [
+#        "plugin.cc",
+#    ],
+#    hdrs = [
+#        "plugin.h",
+#    ],
+#    repository = "@envoy",
+#    visibility = ["//visibility:public"],
+#    deps = [
+#        ":config_cc_proto",
+#        "@envoy//api/wasm/cpp/contrib:contrib_lib",
+#        "@envoy//source/extensions/common/wasm/null:null_plugin_lib",
+#    ],
+#)
 
 cc_proto_library(
     name = "config_cc_proto",
@@ -58,31 +58,31 @@ proto_library(
     srcs = ["config.proto"],
 )
 
-envoy_extension_cc_test(
-    name = "plugin_test",
-    size = "small",
-    srcs = ["plugin_test.cc"],
-    data = [
-        "//extensions/attributegen/testdata",
-    ],
-    extension_name = "envoy.filters.http.wasm",
-    repository = "@envoy",
-    deps = [
-        ":attributegen_plugin",
-        "//external:abseil_hash_testing",
-        "@envoy//source/common/stream_info:stream_info_lib",
-        "@envoy//source/extensions/common/wasm:wasm_interoperation_lib",
-        "@envoy//source/extensions/common/wasm:wasm_lib",
-        "@envoy//source/extensions/filters/http/wasm:wasm_filter_lib",
-        "@envoy//test/mocks/grpc:grpc_mocks",
-        "@envoy//test/mocks/http:http_mocks",
-        "@envoy//test/mocks/network:network_mocks",
-        "@envoy//test/mocks/server:server_mocks",
-        "@envoy//test/mocks/ssl:ssl_mocks",
-        "@envoy//test/mocks/stream_info:stream_info_mocks",
-        "@envoy//test/mocks/thread_local:thread_local_mocks",
-        "@envoy//test/mocks/upstream:upstream_mocks",
-        "@envoy//test/test_common:environment_lib",
-        "@envoy//test/test_common:utility_lib",
-    ],
-)
+#envoy_extension_cc_test(
+#    name = "plugin_test",
+#    size = "small",
+#    srcs = ["plugin_test.cc"],
+#    data = [
+#        "//extensions/attributegen/testdata",
+#    ],
+#    extension_name = "envoy.filters.http.wasm",
+#    repository = "@envoy",
+#    deps = [
+#        ":attributegen_plugin",
+#        "//external:abseil_hash_testing",
+#        "@envoy//source/common/stream_info:stream_info_lib",
+#        "@envoy//source/extensions/common/wasm:wasm_interoperation_lib",
+#        "@envoy//source/extensions/common/wasm:wasm_lib",
+#        "@envoy//source/extensions/filters/http/wasm:wasm_filter_lib",
+#        "@envoy//test/mocks/grpc:grpc_mocks",
+#        "@envoy//test/mocks/http:http_mocks",
+#        "@envoy//test/mocks/network:network_mocks",
+#        "@envoy//test/mocks/server:server_mocks",
+#        "@envoy//test/mocks/ssl:ssl_mocks",
+#        "@envoy//test/mocks/stream_info:stream_info_mocks",
+#        "@envoy//test/mocks/thread_local:thread_local_mocks",
+#        "@envoy//test/mocks/upstream:upstream_mocks",
+#        "@envoy//test/test_common:environment_lib",
+#        "@envoy//test/test_common:utility_lib",
+#    ],
+#)
diff --git a/extensions/stats/BUILD b/extensions/stats/BUILD
index 36db93d7..e1a29b62 100644
--- a/extensions/stats/BUILD
+++ b/extensions/stats/BUILD
@@ -52,14 +52,14 @@ proto_library(
     ],
 )
 
-envoy_cc_test(
-    name = "plugin_test",
-    size = "small",
-    srcs = ["plugin_test.cc"],
-    repository = "@envoy",
-    deps = [
-        ":stats_plugin",
-        "//external:abseil_hash_testing",
-        "@envoy//source/extensions/common/wasm:wasm_lib",
-    ],
-)
+#envoy_cc_test(
+#    name = "plugin_test",
+#    size = "small",
+#    srcs = ["plugin_test.cc"],
+#    repository = "@envoy",
+#    deps = [
+#        ":stats_plugin",
+#        "//external:abseil_hash_testing",
+#        "@envoy//source/extensions/common/wasm:wasm_lib",
+#    ],
+#)
diff --git a/src/envoy/BUILD b/src/envoy/BUILD
index 65518e77..ad4c612c 100644
--- a/src/envoy/BUILD
+++ b/src/envoy/BUILD
@@ -25,8 +25,8 @@ envoy_cc_binary(
     repository = "@envoy",
     visibility = ["//visibility:public"],
     deps = [
-        "//extensions/access_log_policy:access_log_policy_lib",
-        "//extensions/attributegen:attributegen_plugin",
+        #"//extensions/access_log_policy:access_log_policy_lib",
+        #"//extensions/attributegen:attributegen_plugin",
         "//extensions/metadata_exchange:metadata_exchange_lib",
         "//extensions/stackdriver:stackdriver_plugin",
         "//extensions/stats:stats_plugin",
diff --git a/tools/docker/BUILD b/tools/docker/BUILD
deleted file mode 100644
index d5a6e5fd..00000000
--- a/tools/docker/BUILD
+++ /dev/null
@@ -1,51 +0,0 @@
-# Copyright 2019 Istio Authors. All Rights Reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-################################################################################
-#
-load("@io_bazel_rules_docker//container:image.bzl", "container_image")
-load(
-    "@io_bazel_rules_docker//container:container.bzl",
-    "container_push",
-)
-
-container_image(
-    name = "envoy_distroless",
-    base = "@distroless_cc//image",
-    tars = ["//src/envoy:envoy_tar"],
-)
-
-container_image(
-    name = "envoy_ubuntu",
-    base = "@bionic//image",
-    tars = ["//src/envoy:envoy_tar"],
-)
-
-container_push(
-    name = "push_envoy_distroless",
-    format = "Docker",
-    image = ":envoy_distroless",
-    registry = "gcr.io",
-    repository = "{DOCKER_REPOSITORY}",
-    tag = "{BUILD_CONFIG}-{BUILD_SCM_REVISION}",
-)
-
-container_push(
-    name = "push_envoy_ubuntu",
-    format = "Docker",
-    image = ":envoy_ubuntu",
-    registry = "gcr.io",
-    repository = "{DOCKER_REPOSITORY}",
-    tag = "ubuntu-{BUILD_CONFIG}-{BUILD_SCM_REVISION}",
-)
