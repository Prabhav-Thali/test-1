diff --git a/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy
index ad06e19..b2b6da4 100644
--- a/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy
+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy
@@ -57,6 +57,7 @@ import org.gradle.internal.jvm.Jvm
 import org.gradle.process.ExecResult
 import org.gradle.process.ExecSpec
 import org.gradle.util.GradleVersion
+import java.nio.ByteOrder;
 
 import java.nio.charset.StandardCharsets
 import java.time.ZoneOffset
@@ -1023,18 +1024,28 @@ class BuildPlugin implements Plugin<Project> {
                 if (line.contains(":")) {
                     List<String> parts = line.split(":", 2).collect({it.trim()})
                     String name = parts[0], value = parts[1]
-                    // the ID of the CPU socket
-                    if (name == "physical id") {
-                        currentID = value
-                    }
-                    // Number  of cores not including hyper-threading
-                    if (name == "cpu cores") {
-                        assert currentID.isEmpty() == false
-                        socketToCore[currentID] = Integer.valueOf(value)
-                        currentID = ""
-                    }
-                }
-            })
+					// check if its little or big endian
+					if (ByteOrder.nativeOrder().equals(ByteOrder.LITTLE_ENDIAN)) {
+							// the ID of the CPU socket
+							if (name == "physical id") {
+								currentID = value
+							}
+							// Number  of cores not including hyper-threading
+							if (name == "cpu cores") {
+								assert currentID.isEmpty() == false
+								socketToCore[currentID] = Integer.valueOf(value)
+								currentID = ""
+							}
+					}
+					//For Big Endian
+					else{
+							if (name == "# processors") {
+								println ("No. of processors=$value")
+								socketToCore[0] = Integer.valueOf(value)
+							}
+						}
+				}
+			})
             return socketToCore.values().sum()
         } else if ('Mac OS X'.equals(System.getProperty('os.name'))) {
             // Ask macOS to count physical CPUs for us
